rm(list=ls(all=TRUE))
library(MASS)
#Install package betareg
library(betareg)
library(robustbetareg)
#dt=read.csv(file.choose(),header=T)
#dt=read.csv(file.choose(),header=T)
data("GasolineYield")
y=GasolineYield[,1]
xx=GasolineYield[,-1]
x=xx[,-5]
#x=scale(x, center = TRUE)
data=data.frame(y,x)
p=5
model<- betareg(y ~., data = data)
#data=data.frame(y,x1,x2,x3,x4,x5,x6)

#p=7
#model<- betareg(yield~.,data=GasolineYield)
summary(model)
be <- model$coefficients$mean
phi=model$coefficients$precision

xw=solve(vcov(model))[1:p,1:p]
lemda=eigen(xw)$values
alpha = (eigen(xw)$vectors)%*%be

I=diag(1,p)

lemax=max(lemda)
almin=min(alpha^2)
almax=max(alpha^2)
lemin=min(lemda)

### Improved Shrinkage Estimators ###
k1=k1=phi/almin
k2=max(sqrt(phi/(alpha^2)))
k3=max(k1)
k4=(p*phi)/(sum(alpha^2))
k4a=sqrt((p*phi)/(sum(alpha^2)))
k5=(p*phi)/(sum(lemda*(alpha^2)))
k6=(abs(min(phi/(2*alpha^2+phi/lemda)))) #k-lmin
kkl2=abs(max(phi/(2*alpha^2+phi/lemda))) #k-lmax
### Completely new Shrinkage Estimators ###
q1=phi/almin
q2=max((phi/(alpha^2))*lemda)
q3=mean((phi*lemda)/(alpha^2))
#q4=max(1/q)
q5=1/k5	
#q6=(sqrt(kkl2))^(1/4)
### Liu parameter
dls=abs(max(0,(((alpha^2))/((phi/lemda)+(alpha^2)))))
d=min(phi/(alpha^2))
d2=sqrt(d)
q6=sqrt(q5)
### BRR ###

RR1=solve(xw + (k1*I))%*%xw%*%be
RR2=solve(xw + I)%*%xw%*%be
RR3=solve(xw + I)%*%(xw + k5*I)%*%be
RR4=solve(xw + k6*I)%*%(xw - k6*I)%*%be

#library(robustbetareg)


robust1<-robustbetareg(y~., data=data, type = "MDPDE", alpha=0.09)
rr=robust1$coefficients$mean

robust2<-robustbetareg(y~., data=data, type = "SMLE", alpha=0.09)
rr2=robust2$coefficients$mean

robust3<-robustbetareg(y~., data=data, type = "LSMLE", alpha=0.09)
rr3=robust3$coefficients$mean

robust4<-robustbetareg(y~., data=data, type = "LMDPDE", alpha=0.09)
rr4=robust4$coefficients$mean


k1a=phi/min(rr^2)
k1b=phi/min(rr2^2)
k1c=phi/min(rr3^2)
k1d=phi/min(rr4^2)



#plotenvelope(rr3)
#plotenvelope(rr4)


e=lemda
msemle=sum(phi/e)
mseridge=phi*sum((e+(k1^2)*(be^2))/(e+k1)^2)
mseridge_rr=phi*sum((e+(k1^2)*(rr^2))/(e+k1)^2)
mseridge_rr2=phi*sum((e+(k1^2)*(rr2^2))/(e+k1)^2)
mseridge_rr3=phi*sum((e+(k1^2)*(rr3^2))/(e+k1)^2)
mseridge_rr4=phi*sum((e+(k1^2)*(rr4^2))/(e+k1)^2)

res=c(msemle,mseridge,mseridge_rr,mseridge_rr2,mseridge_rr3,mseridge_rr4)


res1=cbind(be,RR1,rr,rr2,rr3,rr4)
dat=rbind(res1,res)
colnames(dat)=c('BR','Ridge','Robust_A','Robust_B','Robust_C','Robust_D')
rownames(dat)=c('Intercept','X1','X2','X3','X4','MSE')
dat   


library(car)
VIF=vif(model)
VIF

library(corrplot)
M = cor(x)
#corrplot(M, method = 'number') # colorful number
corrplot(M, method = 'number', mar = c(0, 0, 2, 0), tl.cex = 2)

plot(model)

# Calculate the eigenvalues and eigenvectors of the design matrix xw
eigen_result <- eigen(xw)
eigen_values <- eigen_result$values
eigen_vectors <- eigen_result$vectors

# Calculate the conditional number
conditional_number <- max(eigen_values) / min(eigen_values)

# Calculate the conditional index
conditional_index <- max(eigen_values) / eigen_values

# Print the results
cat("Conditional Number:", conditional_number, "\n")
cat("Conditional Index:", conditional_index, "\n")

